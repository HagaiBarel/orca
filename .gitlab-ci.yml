stages:
  - build_code
  - build_image
  - tag_image
  - tag_image_latest

build_code:
  image: golang:1.10.3-alpine
  stage: build_code
  before_script:
  - apk add --no-cache git glide
  # - go get -u github.com/golang/dep/cmd/dep 
  - export GOPATH=$(dirname $CI_PROJECT_DIR)/go
  - mkdir -p $GOPATH/src
  - cd $GOPATH/src
  - ln -s $CI_PROJECT_DIR
  - cd $CI_PROJECT_NAME
  # - dep ensure -update
  # - go get k8s.io/client-go/...
  # - go get k8s.io/api/core/v1
  - glide up -v
  script:
  - go build -o orca cmd/orca.go
  artifacts:
    paths: [orca]
    expire_in: 1 hrs

.image: &image
  image: docker:stable
  services:
  - docker:dind
  variables:
    DOCKER_HOST: tcp://localhost:2375

build_image_candidate:
  stage: build_image
  <<: *image
  dependencies: [build_code]
  script:
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  - docker build $DOCKER_OPTS -t $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID .
  - docker push $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID

.tag_image: &tag_image
  <<: *image
  when: manual
  before_script:
  - apk add --no-cache git
  - git checkout $CI_BUILD_REF_NAME
  - git pull --tags
  - export IMAGE_TAG=$(git describe --exact-match --tags HEAD)
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY

tag_image:
  stage: tag_image
  <<: *tag_image
  script:
  - docker pull $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID
  - docker tag $CI_REGISTRY_IMAGE:$CI_PIPELINE_ID $CI_REGISTRY_IMAGE:$IMAGE_TAG
  - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG

tag_image_latest:
  stage: tag_image_latest
  <<: *tag_image
  script:
  - docker pull $CI_REGISTRY_IMAGE:$IMAGE_TAG
  - docker tag $CI_REGISTRY_IMAGE:$IMAGE_TAG $CI_REGISTRY_IMAGE:latest
  - docker push $CI_REGISTRY_IMAGE:latest
